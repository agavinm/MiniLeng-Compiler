Autor: Andrés Gavín Murillo 716358
Información sobre el compilador del lenguaje MiniLeng.

Modo de empleo:
 ./compilador [argumentos] [archivo]
    [...] : Opcional
    Argumentos disponibles:
     -h : Muestra el mensaje de ayuda.
     -p : Uso del Panic mode (explicado en características).
     -v : Muestra información adicional (explicado en características).
     -s : Muestra la tabla de símbolos cada vez que se cierre un bloque.
    Ejemplos de uso:
     ./compilador -h
     ./compilador programa.ml
     ./compilador -p programa.ml
     ./compilador -v -p programa.ml
     ./compilador -s programa.ml

Características:
 El compilador está preparado para el lenguaje MiniLeng (extensión de ficheros .ml).
 
 Opciones disponibles:
  Panic mode: Modo de recuperación que permite la compilación cuando falta algún ';' o fin de bloque (Fin).
              En estos casos el compilador deja de comprobar nuevos tokens hasta que encuentra el token que
              faltaba (';' o Fin) o un fin de línea. Puede generar nuevos errores o situaciones no deseadas,
              por ejemplo si en la misma línea hay dos sentencias, y falta un ';' para separar ambas. En este
              caso la segunda sentencia será ignorada (Ej: 'a := 5  a := a - 1;', esto será interpretado como
              'a := 5;').
              Se mostrará un mensaje de AVISO indicando donde se ha empleado el Panic mode.
              
  Información adicional: Modo 'verbose' que muestra una tabla con información de las apariciones de cada token,
                         separadas en los bloques de Palabras reservadas, Operadores lógicos, Operaciones, 
                         Operadores aritméticos, Constantes enteras, Caracteres, Cadenas e Identificadores.
                                Opción verbose: Número de apariciones de:
                                ---------------------------------------
                                Palabras reservadas 'programa':    1
                                .....
                                Palabras reservadas 'ref':         0
                                ---------------------------------------
                                Operadores lógicos 'and':          0
                                .....
                                Operadores lógicos 'false':        0
                                ---------------------------------------
                                Operaciones 'escribir':            0
                                .....
                                Operaciones 'caraent':             0
                                ---------------------------------------
                                Operadores aritméticos 'mod':      1
                                .....
                                Operadores aritméticos ')':        5
                                ---------------------------------------
                                Constantes enteras:                3
                                Caracteres:                        0
                                Cadenas:                           0
                                Identificadores:                  21
                                ---------------------------------------
 
  Tabla de símbolos: Muestra la tabla de símbolos cada vez que se cierra un bloque.
                     Si algún símbolo carece de alguno de los atributos, se muestra en blanco.
                     La @ de los parámetros y las variables sigue el mismo formato, pero la @ de las acciones
                     representa el número asociado a su etiqueta Lx (siendo x el número que se muestra en la tabla).
                     La tabla presenta el siguiente formato:
        ---------------------------------------------------------------------------------------------------------------
        |                                              TABLA DE SÍMBOLOS                                              |
        ---------------------------------------------------------------------------------------------------------------
        | Hash | Simbolo              | Nivel | Tipo      | Visible  | Variable    | Clase | Parametros         | @   |
        ---------------------------------------------------------------------------------------------------------------
        .....
 
 Léxico:
  No hay distinción entre mayúsculas y minúsculas (no es case-sensitive).
  
  Se permiten comentarios de una línea comenzados por el carácter '%'.
  Se permiten comentarios de varias líneas comenzados y terminados por '%%'.
 
 Sintáctico:
  La gramática admitida es del tipo LL(1) (por defecto) y está definida en el fichero 'gramatica-BNF-miniLeng.html'.
  
  Se permiten funciones anidadas (acciones) definiéndolas entre el bloque de variables y el bloque de sentencias.
        accion abuelo;
        ... % Bloque de variables
            accion padre();
            ... % Bloque de variables
                accion hijo(...);
                ... % Bloque de variables
                principio
                ... % Bloque de sentencias
                fin
            principio
            ... % Bloque de sentencias
            fin
        principio
        ... % Bloque de sentencias
        fin

  Se permiten encadenamientos de bloques condicionales (si / si_no) de la siguiente manera:
        si ... ent
            si ... ent
                si ... ent
                    si ... ent
                        ... % Bloque de sentencias
                    si_no
                        ... % Bloque de sentencias
                    fsi
                si_no
                    si ... ent
                        ... % Bloque de sentencias
                    fsi
                fsi
            fsi 
        fsi
        
  Se permiten los parámetros por valor o referencia en una acción, para ello se debe de indicar
  delante del parámetro si es por valor ('val') o referencia ('ref'):
        accion fib (Val entero n; ref entero r);
        
  Todo bloque de sentencias debe tener al menos una sentencia.
  
 Semántico:
  El lenguaje es fuertemente tipado, es decir, sólo se permiten asignaciones que sean del mismo tipo
  y operaciones donde los dos operadores sean del mismo tipo (la operación puede devolver un tipo 
  diferente).
  Los parámetros por referencia y las variables pueden ser asignables y evaluados, a diferencia de los
  parámetros por valor que solo pueden ser evaluados.
  Se permite la escritura de cualquier expresión y cadenas constantes.
  Sólo se permite la lectura de tipos asignables que sean caracteres o enteros.
  
 Generación de código:
  Se genera un código intermedio ejecutable por la Máquina P.
  Dado un fichero de entrada con formato '.ml', genera un fichero de código intermedio con 
  extensión '.code'.
  Si ha habido algún error en el proceso de compilación, no se genera el fichero de salida.
  
 Errores:
  Errores léxicos: Si ha habido un error léxico, se muestra la línea y columna, junto con el error 
  léxico localizado, y el compilador termina su ejecución.
        "ERROR LÉXICO (<línea, columna>): símbolo no reconocido: <símbolo>"
  
  Errores sintácticos: Si ha habido un error sintáctico, se muestra la línea y columna, junto con 
  un mensaje de error, y el compilador sigue su ejecución.
        "ERROR SINTÁCTICO(<línea, columna>): <mensaje de error>"

  Errores semánticos: Si ha habido un error semántico, se muestra la línea y columna, junto con 
  un mensaje de error, y el compilador sigue su ejecución.
        "ERROR SEMÁNTICO(<línea, columna>): <mensaje de error>"
