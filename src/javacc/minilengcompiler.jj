//*****************************************************************
// File:   MiniLengCompiler.jj
// Author: Andrés Gavín Murillo 716358
// Date:   24/3/2019
// Coms:   Procesadores de lenguajes - Compilador de MiniLengCompiler V2.0
//         JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
//*****************************************************************
options{    static = true;
    ignore_case = true;}PARSER_BEGIN(MiniLengCompiler)

package javacc;

import lib.TablaVeces;
import lib.ErrorLexico;
import java.io.FileInputStream;

public class MiniLengCompiler {
    static FileInputStream currentFile = null;
    
    public static void main(String args []) throws ParseException {
        System.out.println("Compilador de MiniLengCompiler V2.0 Autor: Andrés Gavín Murillo 716358. Ayuda: ./compilador -h\n");
        
        Boolean verbose = false;
        MiniLengCompiler compiler;
        FileInputStream f = null;
        TablaVeces tabla = new TablaVeces();

        // Lanzar compilador
        if (args.length == 0) { // Sin argumentos
            System.out.println("Uso: ./compilador [argumentos] [archivo]");
            return ;
        }
        else { // Opción ayuda
            if (args[0].equals("-h")) {
                System.out.println("Uso: ./compilador [argumentos] [archivo]");
                System.out.println("     [] -> opcional");
                System.out.println("Argumentos:");
                System.out.println("    -h  -> Muestra la ayuda");
                System.out.println("    -v  -> Muestra información adicional");
                return ;
            }
            else {
                int n_arg = 0;
                if (args[0].equals("-v") && (args.length > 1)) { // Opción verbose
                    verbose = true;
                    n_arg++;
                }

                try {
                    f = new FileInputStream(args[n_arg]);
                    currentFile = new FileInputStream(args[n_arg]);
                    compiler = new MiniLengCompiler(currentFile);
                }
                catch (java.io.FileNotFoundException e) {
                    System.out.println("Fichero " + args[n_arg] + " no encontrado.");
                    return ;
                }
            }

            try { 
                MiniLengCompiler.programa(verbose);
                System.out.println("Compilación correcta.");
            }
            catch (Error e) { // Error léxico
                ErrorLexico.generar(token, MiniLengCompilerTokenManager.curChar, f);
                return ;
            }
        }
    }
}
// Análisis léxico
PARSER_END(MiniLengCompiler)SKIP :{  " "| "\r"| "\t"| "\n"
| "%" : COMENTARIO}

< COMENTARIO > SKIP :
{
  "\n" : DEFAULT
}

< COMENTARIO > MORE :
{
  < ~[] >
}

TOKEN : /* Estructuras */
{  < tPROGRAMA : "programa" >
    {
        TablaVeces.incrementarValor(0);
    }
| < tPRINCIPIO : "principio" >
    {
        TablaVeces.incrementarValor(1);
    }
| < tFIN : "fin" >
    {
        TablaVeces.incrementarValor(2);
    }
| < tSI : "si" >
    {
        TablaVeces.incrementarValor(3);
    }
| < tENT : "ent" >
    {
        TablaVeces.incrementarValor(4);
    }
| < tSI_NO : "si_no" >
    {
        TablaVeces.incrementarValor(5);
    }
| < tFSI : "fsi" >
    {
        TablaVeces.incrementarValor(6);
    }
| < tMQ : "mq" >
    {
        TablaVeces.incrementarValor(7);
    }
| < tFMQ : "fmq" >
    {
        TablaVeces.incrementarValor(8);
    }
| < tACCION : "accion" >
    {
        TablaVeces.incrementarValor(9);
    }
| < tPC : ";" >
    {
        TablaVeces.incrementarValor(10);
    }
| < tC : "," >
    {
        TablaVeces.incrementarValor(11);
    }
}

TOKEN : /* Tipos de datos */
{
  < tVAR : "var" >
    {
        TablaVeces.incrementarValor(12);
    }
| < tENTERO : "entero" >
    {
        TablaVeces.incrementarValor(13);
    }
| < tBOOLEANO : "booleano" >
    {
        TablaVeces.incrementarValor(14);
    }
| < tCARACTER : "caracter" >
    {
        TablaVeces.incrementarValor(15);
    }
| < tVAL : "val" >
    {
        TablaVeces.incrementarValor(16);
    }
| < tREF : "ref" >
    {
        TablaVeces.incrementarValor(17);
    }
}

TOKEN : /* Operadores lógicos */
{
  < tAND : "and" >
    {
        TablaVeces.incrementarValor(18);
    }
| < tOR : "or" >
    {
        TablaVeces.incrementarValor(19);
    }
| < tNOT : "not" >
    {
        TablaVeces.incrementarValor(20);
    }
| < tMAYOR : ">" >
    {
        TablaVeces.incrementarValor(21);
    }
| < tMENOR : "<" >
    {
        TablaVeces.incrementarValor(22);
    }
| < tIGUAL : "=" >
    {
      TablaVeces.incrementarValor(23);
    }
| < tMAI : ">=" >
    {
        TablaVeces.incrementarValor(24);
    }
| < tMEI : "<=" >
    {
        TablaVeces.incrementarValor(25);
    }
| < tNI : "<>" >
    {
        TablaVeces.incrementarValor(26);
    }
| < tTRUE : "true" >
    {
        TablaVeces.incrementarValor(27);
    }
| < tFALSE : "false" >
    {
        TablaVeces.incrementarValor(28);
    }
}

TOKEN : /* Operaciones */
{
  < tESCRIBIR : "escribir" >
    {
        TablaVeces.incrementarValor(29);
    }
| < tLEER : "leer" >
    {
        TablaVeces.incrementarValor(30);
    }
| < tENTACAR : "entacar" >
    {
        TablaVeces.incrementarValor(31);
    }
| < tCARAENT : "caraent" >
    {
        TablaVeces.incrementarValor(32);
    }
}
TOKEN : /* Operadores aritméticos */{
  < tMOD : "mod" >
    {
        TablaVeces.incrementarValor(33);
    }
| < tDIV : "div" | "/" >
    {
        TablaVeces.incrementarValor(34);
    }
| < tOPAS : ":=" >
    {
        TablaVeces.incrementarValor(35);
    }
| < tSUMA : "+" >
    {
        TablaVeces.incrementarValor(36);
    }
| < tRESTA : "-" >
    {
        TablaVeces.incrementarValor(37);
    }
| < tMULTIPLICA : "*" >
    {
        TablaVeces.incrementarValor(38);
    }
| < tAP : "(" >
    {
        TablaVeces.incrementarValor(39);
    }
| < tCP : ")" >
    {
        TablaVeces.incrementarValor(40);
    }}TOKEN :{  < tCONSTENTERA : (< DIGITO >)+ >
    {
        TablaVeces.incrementarValor(41);
    }| < #DIGITO : [ "0"-"9" ] >
| < tCONSTCHAR : ["\""] ~["\""] ["\""] >
    {
        TablaVeces.incrementarValor(42);
    }
| < tCONSTCAD : ["\""] (~["\""])+ ["\""] >
    {
        TablaVeces.incrementarValor(43);
    }
| < tIDENTIFICADOR : (< LETRA > | (< LETRA > | "_") (< LETRA > | < DIGITO > | "_")*
    (< LETRA > | < DIGITO >)) >
    {
        TablaVeces.incrementarValor(44);
    }
| < #LETRA : [ "A"-"Z" ] >}

// Análisis sintáctico
void programa(Boolean verbose) :
{}
{
    try { 
	    <tPROGRAMA> <tIDENTIFICADOR> <tPC> declaracion_variables() declaracion_acciones()
	     bloque_sentencias() < EOF >
	        {
	            if (verbose)
	                TablaVeces.print();
	            return;
	        }
    }
    catch (Exception e) { // Error sintáctico
        System.out.println("Compilación fallida.");
        System.out.println(e.getMessage());
    }
}

void declaracion_variables() :
{}
{
    try { 
        ( declaracion() <tPC> )*
    }
    catch (Exception e) { // Error sintáctico
        System.out.println("Compilación fallida.");
        System.out.println(e.getMessage());
    }
}

void declaracion() :
{}
{
    try { 
        tipo_variables() identificadores()
    }
    catch (Exception e) { // Error sintáctico
        System.out.println("Compilación fallida.");
        System.out.println(e.getMessage());
    }
}

void tipo_variables() :
{}
{
    try { 
        <tENTERO> | <tCARACTER> | <tBOOLEANO>
    }
    catch (Exception e) { // Error sintáctico
        System.out.println("Compilación fallida.");
        System.out.println(e.getMessage());
    }
}

void identificadores() :
{}
{
    try { 
        <tIDENTIFICADOR> ( <tC> <tIDENTIFICADOR> )*
    }
    catch (Exception e) { // Error sintáctico
        System.out.println("Compilación fallida.");
        System.out.println(e.getMessage());
    }
}

void declaracion_acciones() :
{}
{
    try { 
        ( declaracion_accion() )*
    }
    catch (Exception e) { // Error sintáctico
        System.out.println("Compilación fallida.");
        System.out.println(e.getMessage());
    }
}

void declaracion_accion() :
{}
{
    try { 
        cabecera_accion() <tPC> declaracion_variables()
         declaracion_acciones() bloque_sentencias()
    }
    catch (Exception e) { // Error sintáctico
        System.out.println("Compilación fallida.");
        System.out.println(e.getMessage());
    }
}

void cabecera_accion() :
{}
{
    try { 
        <tACCION> <tIDENTIFICADOR> parametros_formales()
    }
    catch (Exception e) { // Error sintáctico
        System.out.println("Compilación fallida.");
        System.out.println(e.getMessage());
    }
}

void parametros_formales() :
{}
{
    try { 
        ( <tAP> ( parametros() )* <tCP> )?
    }
    catch (Exception e) { // Error sintáctico
        System.out.println("Compilación fallida.");
        System.out.println(e.getMessage());
    }
}

void lista_parametros() :
{}
{
    try { 
        identificadores() ( <tPC> parametros() )*
    }
    catch (Exception e) { // Error sintáctico
        System.out.println("Compilación fallida.");
        System.out.println(e.getMessage());
    }
}

void parametros() :
{}
{
    try { 
        clase_parametros() tipo_variables() lista_parametros()
    }
    catch (Exception e) { // Error sintáctico
        System.out.println("Compilación fallida.");
        System.out.println(e.getMessage());
    }
}

void clase_parametros() :
{}
{
    try { 
        <tVAL> | <tREF>
    }
    catch (Exception e) { // Error sintáctico
        System.out.println("Compilación fallida.");
        System.out.println(e.getMessage());
    }
}

void bloque_sentencias() :
{}
{
    try { 
        <tPRINCIPIO> lista_sentencias() <tFIN>
    }
    catch (Exception e) { // Error sintáctico
        System.out.println("Compilación fallida.");
        System.out.println(e.getMessage());
    }
}

void lista_sentencias() :
{}
{
    try { 
        ( sentencia() )+
    }
    catch (Exception e) { // Error sintáctico
        System.out.println("Compilación fallida.");
        System.out.println(e.getMessage());
    }
}

void sentencia() :
{}
{
    try { 
        leer() <tPC>
	    | escribir() <tPC>
	    | identificacion()
	    | seleccion()
	    | mientras_que()
    }
    catch (Exception e) { // Error sintáctico
        System.out.println("Compilación fallida.");
        System.out.println(e.getMessage());
    }
}

void leer() :
{}
{
    try { 
        <tLEER> <tAP> lista_asignables() <tCP>
    }
    catch (Exception e) { // Error sintáctico
        System.out.println("Compilación fallida.");
        System.out.println(e.getMessage());
    }
}

void lista_asignables() :
{}
{
    try { 
        identificadores()
    }
    catch (Exception e) { // Error sintáctico
        System.out.println("Compilación fallida.");
        System.out.println(e.getMessage());
    }
}

void escribir() :
{}
{
    try { 
        <tESCRIBIR> <tAP> lista_escribibles() <tCP>
    }
    catch (Exception e) { // Error sintáctico
        System.out.println("Compilación fallida.");
        System.out.println(e.getMessage());
    }
}

void lista_escribibles() :
{}
{
    try { 
        ( <tCONSTCAD> | expresion() ) ( <tC> ( <tCONSTCAD> | expresion() ) )*
    }
    catch (Exception e) { // Error sintáctico
        System.out.println("Compilación fallida.");
        System.out.println(e.getMessage());
    }
}

void identificacion() :
{}
{
    try { 
        <tIDENTIFICADOR> ( asignacion() | invocacion_accion() )
    }
    catch (Exception e) { // Error sintáctico
        System.out.println("Compilación fallida.");
        System.out.println(e.getMessage());
    }
}

void asignacion() :
{}
{
    try { 
        <tOPAS> expresion() <tPC>
    }
    catch (Exception e) { // Error sintáctico
        System.out.println("Compilación fallida.");
        System.out.println(e.getMessage());
    }
}

void invocacion_accion() :
{}
{
    try { 
        ( argumentos() )? <tPC>
    }
    catch (Exception e) { // Error sintáctico
        System.out.println("Compilación fallida.");
        System.out.println(e.getMessage());
    }
}

void mientras_que() :
{}
{
    try { 
        <tMQ> expresion() lista_sentencias() <tFMQ>
    }
    catch (Exception e) { // Error sintáctico
        System.out.println("Compilación fallida.");
        System.out.println(e.getMessage());
    }
}

void seleccion() :
{}
{
    try { 
        <tSI> expresion() <tENT> lista_sentencias() ( <tSI_NO> lista_sentencias() )? <tFSI>
    }
    catch (Exception e) { // Error sintáctico
        System.out.println("Compilación fallida.");
        System.out.println(e.getMessage());
    }
}

void argumentos() :
{}
{
    try { 
        <tAP> ( lista_expresiones() )? <tCP>
    }
    catch (Exception e) { // Error sintáctico
        System.out.println("Compilación fallida.");
        System.out.println(e.getMessage());
    }
}

void lista_expresiones() :
{}
{
    try { 
        expresion() ( <tC> expresion() )*
    }
    catch (Exception e) { // Error sintáctico
        System.out.println("Compilación fallida.");
        System.out.println(e.getMessage());
    }
}

void expresion() :
{}
{
    try { 
        expresion_simple() ( operador_relacional() expresion_simple() )?
    }
    catch (Exception e) { // Error sintáctico
        System.out.println("Compilación fallida.");
        System.out.println(e.getMessage());
    }
}

void operador_relacional() :
{}
{
    try { 
        <tMAYOR> | <tMENOR> | <tIGUAL> | <tMAI> | <tMEI> | <tNI>
    }
    catch (Exception e) { // Error sintáctico
        System.out.println("Compilación fallida.");
        System.out.println(e.getMessage());
    }
}

void expresion_simple() :
{}
{
    try { 
        termino() ( operador_aditivo() termino() )*
    }
    catch (Exception e) { // Error sintáctico
        System.out.println("Compilación fallida.");
        System.out.println(e.getMessage());
    }
}

void operador_aditivo() :
{}
{
    try { 
        <tSUMA> | <tRESTA> | <tOR>
    }
    catch (Exception e) { // Error sintáctico
        System.out.println("Compilación fallida.");
        System.out.println(e.getMessage());
    }
}

void termino() :
{}
{
    try { 
        factor() ( operador_multiplicativo() factor() )*
    }
    catch (Exception e) { // Error sintáctico
        System.out.println("Compilación fallida.");
        System.out.println(e.getMessage());
    }
}

void operador_multiplicativo() :
{}
{
    try { 
        <tMOD> | <tDIV> | <tMULTIPLICA> | <tAND>
    }
    catch (Exception e) { // Error sintáctico
        System.out.println("Compilación fallida.");
        System.out.println(e.getMessage());
    }
}

void factor() :
{}
{
    try { 
        <tRESTA> factor()
	    | <tNOT> factor()
	    | <tAP> expresion() <tCP>
	    | <tENTACAR> <tAP> expresion() <tCP>
	    | <tCARAENT> <tAP> expresion() <tCP>
	    | <tIDENTIFICADOR>
	    | <tCONSTENTERA>
	    | <tCONSTCHAR>
	    | <tTRUE>
	    | <tFALSE>
    }
    catch (Exception e) { // Error sintáctico
        System.out.println("Compilación fallida.");
        System.out.println(e.getMessage());
    }
}
