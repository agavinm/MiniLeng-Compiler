//*****************************************************************
// File:   MiniLengCompiler.jj
// Author: Andrés Gavín Murillo 716358
// Date:   15/4/2019
// Coms:   Procesadores de lenguajes - Compilador de MiniLengCompiler V1.3
//         JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
//*****************************************************************
options{    static = true;
    ignore_case = true;}PARSER_BEGIN(MiniLengCompiler)

package javacc;

import lib.TablaVeces;
import java.io.FileInputStream;

public class MiniLengCompiler {
    public static void main(String args []) throws ParseException {
        System.out.println("Compilador de MiniLengCompiler V1.2 Autor: Andrés Gavín Murillo 716358. Ayuda: ./compilador -h\n");
        
        Boolean verbose = false;
        MiniLengCompiler compiler;
        TablaVeces tabla = new TablaVeces();

        // Lanzar compilador
        if (args.length == 0) { // Sin argumentos
            System.out.println("Uso: ./compilador [argumentos] [archivo]");
            return ;
        }
        else { // Opción ayuda
            if (args[0].equals("-h")) {
                System.out.println("Uso: ./compilador [argumentos] [archivo]");
                System.out.println("     [] -> opcional");
                System.out.println("Argumentos:");
                System.out.println("    -h  -> Muestra la ayuda");
                System.out.println("    -v  -> Muestra información adicional");
                return ;
            }
            else {
                int n_arg = 0;
                if (args[0].equals("-v") && (args.length > 1)) { // Opción verbose
                    verbose = true;
                    n_arg++;
                }

                try {
                    compiler = new MiniLengCompiler(new FileInputStream(args[n_arg]));
                }
                catch (java.io.FileNotFoundException e) {
                    System.out.println("Fichero " + args[n_arg] + " no encontrado.");
                    return ;
                }
            }

            try { 
                MiniLengCompiler.programa(verbose);
                System.out.println("Compilación correcta.");
            }
            catch (Exception e) { // Error sintáctico
                System.out.println("Compilación fallida.");
                System.out.println(e.getMessage());
                MiniLengCompiler.ReInit(System.in);
            }
            catch (Error e) { // Error léxico
                System.out.println("ERROR LÉXICO (<" + SimpleCharStream.getBeginLine() + ", " + 
                    SimpleCharStream.getBeginColumn() + ">) : símbolo no reconocido: <" +
                    SimpleCharStream.GetImage().charAt(MiniLengCompilerTokenManager.curLexState) + ">");
                
                return ;
            }
        }
    }
}
PARSER_END(MiniLengCompiler)SKIP :{  " "| "\r"| "\t"| "\n"
| "%" : COMENTARIO}

< COMENTARIO > SKIP : // Comentarios de varias lineas %% opcional
{
  "\n" : DEFAULT
}

< COMENTARIO > MORE :
{
  < ~[] >
}

TOKEN : /* Estructuras */
{  < tPROGRAMA : "programa" >
    {
        TablaVeces.incrementarValor(TablaVeces.tipo_token.tPROGRAMA);
    }
| < tPRINCIPIO : "principio" >
    {
        TablaVeces.incrementarValor(TablaVeces.tipo_token.tPRINCIPIO);
    }
| < tFIN : "fin" >
    {
        TablaVeces.incrementarValor(TablaVeces.tipo_token.tFIN);
    }
| < tSI : "si" >
    {
        TablaVeces.incrementarValor(TablaVeces.tipo_token.tSI);
    }
| < tENT : "ent" >
    {
        TablaVeces.incrementarValor(TablaVeces.tipo_token.tENT);
    }
| < tSI_NO : "si_no" >
    {
        TablaVeces.incrementarValor(TablaVeces.tipo_token.tSI_NO);
    }
| < tFSI : "fsi" >
    {
        TablaVeces.incrementarValor(TablaVeces.tipo_token.tFSI);
    }
| < tMQ : "mq" >
    {
        TablaVeces.incrementarValor(TablaVeces.tipo_token.tMQ);
    }
| < tFMQ : "fmq" >
    {
        TablaVeces.incrementarValor(TablaVeces.tipo_token.tFMQ);
    }
| < tACCION : "accion" >
    {
        TablaVeces.incrementarValor(TablaVeces.tipo_token.tACCION);
    }
| < tPC : ";" >
    {
        TablaVeces.incrementarValor(TablaVeces.tipo_token.tPC);
    }
| < tC : "," >
    {
        TablaVeces.incrementarValor(TablaVeces.tipo_token.tC);
    }
}

TOKEN : /* Tipos de datos */
{
  < tVAR : "var" >
    {
        TablaVeces.incrementarValor(TablaVeces.tipo_token.tVAR);
    }
| < tENTERO : "entero" >
    {
        TablaVeces.incrementarValor(TablaVeces.tipo_token.tENTERO);
    }
| < tBOOLEANO : "booleano" >
    {
        TablaVeces.incrementarValor(TablaVeces.tipo_token.tBOOLEANO);
    }
| < tCARACTER : "caracter" >
    {
        TablaVeces.incrementarValor(TablaVeces.tipo_token.tCARACTER);
    }
| < tVAL : "val" >
    {
        TablaVeces.incrementarValor(TablaVeces.tipo_token.tVAL);
    }
| < tREF : "ref" >
    {
        TablaVeces.incrementarValor(TablaVeces.tipo_token.tREF);
    }
}

TOKEN : /* Operadores lógicos */
{
  < tAND : "and" >
    {
        TablaVeces.incrementarValor(TablaVeces.tipo_token.tAND);
    }
| < tOR : "or" >
    {
        TablaVeces.incrementarValor(TablaVeces.tipo_token.tOR);
    }
| < tNOT : "not" >
    {
        TablaVeces.incrementarValor(TablaVeces.tipo_token.tNOT);
    }
| < tMAYOR : ">" >
    {
        TablaVeces.incrementarValor(TablaVeces.tipo_token.tMAYOR);
    }
| < tMENOR : "<" >
    {
        TablaVeces.incrementarValor(TablaVeces.tipo_token.tMENOR);
    }
| < tIGUAL : "=" >
    {
      TablaVeces.incrementarValor(TablaVeces.tipo_token.tIGUAL);
    }
| < tMAI : ">=" >
    {
        TablaVeces.incrementarValor(TablaVeces.tipo_token.tMAI);
    }
| < tMEI : "<=" >
    {
        TablaVeces.incrementarValor(TablaVeces.tipo_token.tMEI);
    }
| < tNI : "<>" >
    {
        TablaVeces.incrementarValor(TablaVeces.tipo_token.tNI);
    }
| < tTRUE : "true" >
    {
        TablaVeces.incrementarValor(TablaVeces.tipo_token.tTRUE);
    }
| < tFALSE : "false" >
    {
        TablaVeces.incrementarValor(TablaVeces.tipo_token.tFALSE);
    }
}

TOKEN : /* Operaciones */
{
  < tESCRIBIR : "escribir" >
    {
        TablaVeces.incrementarValor(TablaVeces.tipo_token.tESCRIBIR);
    }
| < tLEER : "leer" >
    {
        TablaVeces.incrementarValor(TablaVeces.tipo_token.tLEER);
    }
| < tENTACAR : "entacar" >
    {
        TablaVeces.incrementarValor(TablaVeces.tipo_token.tENTACAR);
    }
| < tCARAENT : "caraent" >
    {
        TablaVeces.incrementarValor(TablaVeces.tipo_token.tCARAENT);
    }
}
TOKEN : /* Operadores aritméticos */{
  < tMOD : "mod" >
    {
        TablaVeces.incrementarValor(TablaVeces.tipo_token.tMOD);
    }
| < tDIV : "div" | "/" >
    {
        TablaVeces.incrementarValor(TablaVeces.tipo_token.tDIV);
    }
| < tOPAS : ":=" >
    {
        TablaVeces.incrementarValor(TablaVeces.tipo_token.tOPAS);
    }
| < tSUMA : "+" >
    {
        TablaVeces.incrementarValor(TablaVeces.tipo_token.tSUMA);
    }
| < tRESTA : "-" >
    {
        TablaVeces.incrementarValor(TablaVeces.tipo_token.tRESTA);
    }
| < tMULTIPLICA : "*" >
    {
        TablaVeces.incrementarValor(TablaVeces.tipo_token.tMULTIPLICA);
    }
| < tAP : "(" >
    {
        TablaVeces.incrementarValor(TablaVeces.tipo_token.tAP);
    }
| < tCP : ")" >
    {
        TablaVeces.incrementarValor(TablaVeces.tipo_token.tCP);
    }}TOKEN :{  < tCONSTENTERA : (< DIGITO >)+ >
    {
        TablaVeces.incrementarValor(TablaVeces.tipo_token.tCONSTENTERA);
    }| < #DIGITO : [ "0"-"9" ] >
| < tCONSTCHAR : ["\""] ~["\""] ["\""] >
    {
        TablaVeces.incrementarValor(TablaVeces.tipo_token.tCONSTCHAR);
    }
| < tCONSTCAD : ["\""] (~["\""])+ ["\""] >
    {
        TablaVeces.incrementarValor(TablaVeces.tipo_token.tCONSTCAD);
    }
| < tIDENTIFICADOR : (< LETRA > | (< LETRA > | "_") (< LETRA > | < DIGITO > | "_")*
    (< LETRA > | < DIGITO >)) >
    {
        TablaVeces.incrementarValor(TablaVeces.tipo_token.tIDENTIFICADOR);
    }
| < #LETRA : [ "A"-"Z" ] >}

void programa(Boolean verbose) :
{}
{
(
      < tPROGRAMA >
    | < tPRINCIPIO >
    | < tFIN >
    | < tSI >
    | < tENT >
    | < tSI_NO >
    | < tFSI >
    | < tMQ >
    | < tFMQ >
    | < tACCION >
    | < tPC >
    | < tC >
    | < tVAR >
    | < tENTERO >
    | < tBOOLEANO >
    | < tCARACTER >
    | < tVAL >
    | < tREF >
    | < tAND >
    | < tOR >
    | < tNOT >
    | < tMAYOR >
    | < tMENOR >
    | < tIGUAL >
    | < tMAI >
    | < tMEI >
    | < tNI >
    | < tTRUE >
    | < tFALSE >
    | < tESCRIBIR >
    | < tLEER >
    | < tENTACAR >
    | < tCARAENT >
    | < tMOD >
    | < tDIV >
    | < tOPAS >
    | < tSUMA >
    | < tRESTA >
    | < tMULTIPLICA >
    | < tAP >
    | < tCP >
    | < tCONSTENTERA >
    | < tCONSTCHAR >
    | < tCONSTCAD >
    | < tIDENTIFICADOR >
    | < EOF >
        {
            if (verbose)
                TablaVeces.print();
            return;
        }
)+
  { return; }
}
