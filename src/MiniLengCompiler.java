/* Generated By:JavaCC: Do not edit this line. MiniLengCompiler.java */
import TablaVeces.TablaVeces;

public class MiniLengCompiler implements MiniLengCompilerConstants {
  public static void main(String args []) throws ParseException
  {
    System.out.println("Compilador de MiniLengCompiler V1. Autor: Andr\u00e9s Gav\u00edn Murillo 716358. Ayuda: ./compilador -h\u005cn");

    Boolean verbose = false;
    MiniLengCompiler parser;
    TablaVeces tabla = new TablaVeces();

    if (args.length == 0) {
      System.out.println("Uso: ./compilador [argumentos] [archivo]");
      return ;
    }
    else {
      if (args[0].equals("-h")) {
        System.out.println("Uso: ./compilador [argumentos] [archivo]");
            System.out.println("     [] -> opcional");
        System.out.println("Argumentos:");
            System.out.println("    -h  -> Muestra la ayuda");
            System.out.println("    -v  -> Muestra informaci\u00f3n adicional");
            return ;
          }
          else if (args[0].equals("-v")) {
            if (args.length > 1) {
              verbose = true;
              try {
            parser = new MiniLengCompiler(new java.io.FileInputStream(args[1]));
        }
        catch (java.io.FileNotFoundException e) {
            System.out.println("Fichero " + args[1] + " no encontrado.");
            return ;
        }
            }
          }
          else {
            try {
            parser = new MiniLengCompiler(new java.io.FileInputStream(args[0]));
        }
        catch (java.io.FileNotFoundException e) {
            System.out.println("Fichero " + args[0] + " no encontrado.");
            return ;
        }
          }

          try {
        if (MiniLengCompiler.programa(verbose) == 0)
                System.out.println("OK.");
        else
                System.out.println("NOK.");
          }
          catch (Exception e) {
                System.out.println("NOK.");
        System.out.println(e.getMessage());
        MiniLengCompiler.ReInit(System.in);
          }
          catch (Error e) {
        return ;
          }
        }
  }

  static final public int programa(Boolean verbose) throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tPROGRAMA:
        jj_consume_token(tPROGRAMA);
        break;
      case tPRINCIPIO:
        jj_consume_token(tPRINCIPIO);
        break;
      case tFIN:
        jj_consume_token(tFIN);
        break;
      case tSI:
        jj_consume_token(tSI);
        break;
      case tENT:
        jj_consume_token(tENT);
        break;
      case tSI_NO:
        jj_consume_token(tSI_NO);
        break;
      case tFSI:
        jj_consume_token(tFSI);
        break;
      case tMQ:
        jj_consume_token(tMQ);
        break;
      case tFMQ:
        jj_consume_token(tFMQ);
        break;
      case tACCION:
        jj_consume_token(tACCION);
        break;
      case tPC:
        jj_consume_token(tPC);
        break;
      case tC:
        jj_consume_token(tC);
        break;
      case tVAR:
        jj_consume_token(tVAR);
        break;
      case tENTERO:
        jj_consume_token(tENTERO);
        break;
      case tBOOLEANO:
        jj_consume_token(tBOOLEANO);
        break;
      case tCARACTER:
        jj_consume_token(tCARACTER);
        break;
      case tVAL:
        jj_consume_token(tVAL);
        break;
      case tREF:
        jj_consume_token(tREF);
        break;
      case tAND:
        jj_consume_token(tAND);
        break;
      case tOR:
        jj_consume_token(tOR);
        break;
      case tNOT:
        jj_consume_token(tNOT);
        break;
      case tMAYOR:
        jj_consume_token(tMAYOR);
        break;
      case tMENOR:
        jj_consume_token(tMENOR);
        break;
      case tIGUAL:
        jj_consume_token(tIGUAL);
        break;
      case tMAI:
        jj_consume_token(tMAI);
        break;
      case tMEI:
        jj_consume_token(tMEI);
        break;
      case tNI:
        jj_consume_token(tNI);
        break;
      case tTRUE:
        jj_consume_token(tTRUE);
        break;
      case tFALSE:
        jj_consume_token(tFALSE);
        break;
      case tESCRIBIR:
        jj_consume_token(tESCRIBIR);
        break;
      case tLEER:
        jj_consume_token(tLEER);
        break;
      case tENTACAR:
        jj_consume_token(tENTACAR);
        break;
      case tCARAENT:
        jj_consume_token(tCARAENT);
        break;
      case tMOD:
        jj_consume_token(tMOD);
        break;
      case tDIV:
        jj_consume_token(tDIV);
        break;
      case tOPAS:
        jj_consume_token(tOPAS);
        break;
      case tSUMA:
        jj_consume_token(tSUMA);
        break;
      case tRESTA:
        jj_consume_token(tRESTA);
        break;
      case tMULTIPLICA:
        jj_consume_token(tMULTIPLICA);
        break;
      case tAP:
        jj_consume_token(tAP);
        break;
      case tCP:
        jj_consume_token(tCP);
        break;
      case tNUMERO:
        jj_consume_token(tNUMERO);
        break;
      case tLETRA:
        jj_consume_token(tLETRA);
        break;
      case tCADENA:
        jj_consume_token(tCADENA);
        break;
      case tIDENTIFICADOR:
        jj_consume_token(tIDENTIFICADOR);
        break;
      case 0:
        jj_consume_token(0);
                  if (verbose)
                        TablaVeces.print();
                  {if (true) return 0;}
        break;
      case tERROR:
        jj_consume_token(tERROR);
                       {if (true) return 1;}
        break;
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 0:
      case tPROGRAMA:
      case tPRINCIPIO:
      case tFIN:
      case tSI:
      case tENT:
      case tSI_NO:
      case tFSI:
      case tMQ:
      case tFMQ:
      case tACCION:
      case tPC:
      case tC:
      case tVAR:
      case tENTERO:
      case tBOOLEANO:
      case tCARACTER:
      case tVAL:
      case tREF:
      case tAND:
      case tOR:
      case tNOT:
      case tMAYOR:
      case tMENOR:
      case tIGUAL:
      case tMAI:
      case tMEI:
      case tNI:
      case tTRUE:
      case tFALSE:
      case tESCRIBIR:
      case tLEER:
      case tENTACAR:
      case tCARAENT:
      case tMOD:
      case tDIV:
      case tOPAS:
      case tSUMA:
      case tRESTA:
      case tMULTIPLICA:
      case tAP:
      case tCP:
      case tNUMERO:
      case tLETRA:
      case tCADENA:
      case tIDENTIFICADOR:
      case tERROR:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
    }
    {if (true) return 1;}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public MiniLengCompilerTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[2];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xffffff01,0xffffff01,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0xdbffff,0xdbffff,};
   }

  /** Constructor with InputStream. */
  public MiniLengCompiler(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public MiniLengCompiler(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new MiniLengCompilerTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public MiniLengCompiler(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new MiniLengCompilerTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public MiniLengCompiler(MiniLengCompilerTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(MiniLengCompilerTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[56];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 2; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 56; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
